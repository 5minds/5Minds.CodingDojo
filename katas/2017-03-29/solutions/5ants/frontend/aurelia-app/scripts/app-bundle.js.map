{"version":3,"sources":["app.js","environment.js","main.js","resources/index.js","/Users/leonhardtobisch/dojo/ameise/5Minds.CodingDojo/katas/2017-03-29/solutions/5ants/frontend/aurelia-app/src/app.html","/Users/leonhardtobisch/dojo/ameise/5Minds.CodingDojo/katas/2017-03-29/solutions/5ants/frontend/aurelia-app/src/resources/ants.css"],"names":["App","httpClient","field","l","attached","createRequest","getServer","asGet","send","then","httpResponse","newUrl","JSON","parse","response","setInterval","httpRes","board","reduce","total","elem","concat","Math","sqrt","length","debug","testing","configure","Promise","config","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","start","setRoot"],"mappings":";;;;;;;;;;;;;;;;QAIaA,cAAAA,cADZ;AAIG,qBAAYC,UAAZ,EAAwB;AAAA;;AACpB,iBAAKA,UAAL,GAAkBA,UAAlB;AACA,iBAAKC,KAAL,GAAa,EAAb;AACA,iBAAKC,CAAL,GAAS,KAAT;AACH;;sBAEDC,+BAAW;AAAA;;AACP,mBAAO,KAAKH,UAAL,CAAgBI,aAAhB,CAA8B,KAAKC,SAAL,EAA9B,EACFC,KADE,GAEFC,IAFE,GAGFC,IAHE,CAGG,UAACC,YAAD,EAAkB;AACpB,oBAAMC,sDAAoDC,KAAKC,KAAL,CAAWH,aAAaI,QAAxB,CAA1D;AACA,uBAAOH,MAAP;AACH,aANE,EAMAF,IANA,CAMK,UAACE,MAAD,EAAY;AAChBI,4BAAY,YAAM;;AAEd,2BAAO,MAAKd,UAAL,CAAgBI,aAAhB,CAA8BM,MAA9B,EACFJ,KADE,GAEFC,IAFE,GAGFC,IAHE,CAGG,UAACO,OAAD,EAAa;AACf,4BAAMC,QAAQL,KAAKC,KAAL,CAAWG,QAAQF,QAAnB,EAA6BG,KAA3C;AACA,8BAAKf,KAAL,GAAae,KAAb;;AAEA,8BAAKf,KAAL,GAAa,MAAKA,KAAL,CAAWgB,MAAX,CAAkB,UAACC,KAAD,EAAQC,IAAR,EAAiB;AAC5C,mCAAOD,MAAME,MAAN,CAAaD,IAAb,CAAP;AACH,yBAFY,CAAb;;AAIA,8BAAKjB,CAAL,GAAYmB,KAAKC,IAAL,CAAU,MAAKrB,KAAL,CAAWsB,MAArB,IAA+B,EAA3C;AACH,qBAZE,CAAP;AAaH,iBAfD,EAeG,IAfH;AAiBH,aAxBE,CAAP;AAyBH;;sBAEDlB,iCAAY;AACR,mBAAO,kDAAP;AACH;;;;;;;;;;;oBC3CU;AACbmB,WAAO,IADM;AAEbC,aAAS;AAFI;;;;;;;;UCUCC,YAAAA;;;;;;;;;;AANhBC,UAAQC,MAAR,CAAe;AACbC,cAAU;AACRC,wBAAkB;AADV;AADG,GAAf;;AAMO,WAASJ,SAAT,CAAmBK,OAAnB,EAA4B;AACjCA,YAAQC,GAAR,CACGC,qBADH,GAEGC,OAFH,CAEW,WAFX;;AAIA,QAAI,sBAAYV,KAAhB,EAAuB;AACrBO,cAAQC,GAAR,CAAYG,kBAAZ;AACD;;AAED,QAAI,sBAAYV,OAAhB,EAAyB;AACvBM,cAAQC,GAAR,CAAYI,MAAZ,CAAmB,iBAAnB;AACD;;AAEDL,YAAQM,KAAR,GAAgB7B,IAAhB,CAAqB;AAAA,aAAMuB,QAAQO,OAAR,EAAN;AAAA,KAArB;AACD;;;;;;;;UCxBeZ,YAAAA;AAAT,WAASA,SAAT,CAAmBE,MAAnB,EAA2B,CAEjC;;ACFD;ACAA","file":"app-bundle.js","sourcesContent":["import { HttpClient } from 'aurelia-http-client';\nimport { inject } from 'aurelia-framework';\n\n@inject(HttpClient)\nexport class App {\n\n\n    constructor(httpClient) {\n        this.httpClient = httpClient;\n        this.field = [];\n        this.l = '0px';\n    }\n\n    attached() {\n        return this.httpClient.createRequest(this.getServer())\n            .asGet()\n            .send()\n            .then((httpResponse) => {\n                const newUrl = `http://192.168.161.41:5000/api/ant/next/${JSON.parse(httpResponse.response)}`;\n                return newUrl;\n            }).then((newUrl) => {\n                setInterval(() => {\n\n                    return this.httpClient.createRequest(newUrl)\n                        .asGet()\n                        .send()\n                        .then((httpRes) => {\n                            const board = JSON.parse(httpRes.response).board;\n                            this.field = board;\n\n                            this.field = this.field.reduce((total, elem) => {\n                                return total.concat(elem);\n                            });\n\n                            this.l = `${Math.sqrt(this.field.length) * 68}px`;\n                        });\n                }, 3000);\n\n            });\n    }\n\n    getServer() {\n        return 'http://192.168.161.41:5000/api/ant/init/10/3,3/n';\n    }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\n\n//Configure Bluebird Promises.\n//Note: You may want to use environment-specific configuration.\nPromise.config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","export function configure(config) {\n  //config.globalResources([]);\n}\n",null,null],"sourceRoot":"../src"}